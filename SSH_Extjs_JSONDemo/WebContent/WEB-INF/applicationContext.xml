<?xml version="1.0" encoding="UTF-8"?>
<beans 
xmlns="http://www.springframework.org/schema/beans"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xmlns:context="http://www.springframework.org/schema/context"
xmlns:aop="http://www.springframework.org/schema/aop"
xmlns:tx="http://www.springframework.org/schema/tx"
xsi:schemaLocation="
http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
http://www.springframework.org/schema/context
http://www.springframework.org/schema/context/spring-context-3.0.xsd
http://www.springframework.org/schema/aop
http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
http://www.springframework.org/schema/tx
http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">

	<!-- 启用注解注入-->
	<context:annotation-config />
	
	<aop:aspectj-autoproxy />
	
	<!-- Demo1:使用IOC容器管理SessionFactory并且使用HibernateTemplat与HibernateDaoSupport简化DAO层开发及提供了基于AOP事务的自动处理-->
	<!-- Demo1：1、配置SessionFactory
	 <bean id="sessionFactory"  class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
	  	<property name="configLocation" value="classpath:hibernate.cfg.xml"></property>
	 </bean>
    -->
    <!-- Demo1：2、配置HibernateTemplate，用于完成数据操作
	 <bean id="hibernateTemplete" class="org.springframework.orm.hibernate3.HibernateTemplate">
	  	<property name="sessionFactory" ref="sessionFactory"></property>
	 </bean>
	-->
	

	<!--  Demo1：项目核心代码 
	<bean id="userService" class="com.ssh.demo.service.UserService"></bean>
	<bean id="userDAO" class="com.ssh.demo.dao.UserDAO">
		 <property name="hibernateTemplete" ref="hibernateTemplete"></property>
	</bean>
	-->
	<!-- Demo2:加载资源文件-->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:jdbc.properties</value>
            </list>
        </property>
    </bean>
    
    
	<!--<context:component-scan base-package="com.ssh.demo"/>-->
	
	
	<!-- Demo2:通过AOP和TX配置实现Spting声明式事务管理-->
	<!-- Demo2：1、配置SessionFactory-->
	<!--  
		<bean id="sessionFactory"  class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
	  		<property name="configLocation" value="classpath:hibernate.cfg.xml"></property>
	 	</bean>-->
	 
	<!-- 为了与Spring TestContext 测试框架整合使用BasicDataSource ,并且重新配置sessionFactory-->
	
	<!-- Spring TestContext 测试框架整合添加配置信息1.dataSource-->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${driver_class}"/>
		<property name="url" value="${url}"/>
		<property name="username" value="${username}"/>
		<property name="password" value="${password}"/>
	</bean>
	
	<!-- Spring TestContext 测试框架整合添加配置信息2.sessionFactory:AnnotationSessionFactoryBean的实现-->
	<!--注意 packagesToScan的使用,必须是Entity所在包上一级目录 -->
	 <bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="packagesToScan" value="com.ssh.demo.*" />
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<prop key="hibernate.jdbc.fetch_size">${hibernate.jdbc.fetch_size}</prop>
				<prop key="hibernate.jdbc.batch_size">${hibernate.jdbc.batch_size}</prop>
			</props>
		</property>
	</bean>
	
	 
	 <!-- Demo2：2、配置事务管理器-->
	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	 
	<!-- Demo2：3、配置事务管模板-->
	<bean id="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
		<property name="transactionManager" ref="transactionManager" />
	</bean>
	
	<!-- Spring TestContext 测试框架整合添加配置信息3.dataSource 添加事务管理DataSourceTransactionManager-->
	<!-- Transaction manager for a single Jdbc DataSource -->
	<bean id="jdbcTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- Jdbc template for a single Jdbc DataSource -->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource" />
    </bean>

	  <!-- Demo2：4、配置AOP让事务管理切入到service层所有方法-->
	 <aop:config>
        <aop:advisor pointcut="within(com.ssh.demo.service..*)" advice-ref="txAdvice"/>
     </aop:config>
     
     <tx:advice id="txAdvice" transaction-manager="transactionManager">
     	<tx:attributes>
     		<tx:method name="*"/>
     	</tx:attributes>
     </tx:advice>
     
    <!--  Demo2：项目核心代码 	-->
	<bean id="userService" class="com.ssh.demo.service.UserService"></bean>
	<bean id="userDAO" class="com.ssh.demo.dao.UserDAO">
		 <property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	
	
	
</beans>